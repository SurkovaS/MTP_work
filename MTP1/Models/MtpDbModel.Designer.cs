//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_Actor_ActorDic", "ActorDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.ActorDic), "Actor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.Actor), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_Actor_UseCase", "UseCase", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.UseCase), "Actor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.Actor), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_Actor_WeightCoefficientDic", "WeightCoefficientDic", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MTP1.Models.WeightCoefficientDic), "Actor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.Actor), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_Defect_Defect", "UseCase", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.UseCase), "Defect", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.Defect), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_Defect_DefectDic", "DefectDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.DefectDic), "Defect", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.Defect), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_Defect_PriorityDic", "PriorityDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.PriorityDic), "Defect", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.Defect), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_DefectPrimaryMetric_Defect", "Defect", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.Defect), "DefectPrimaryMetric", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.DefectPrimaryMetric), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_DefectPrimaryMetric_MetricDic", "SecondaryMetricDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.SecondaryMetricDic), "DefectPrimaryMetric", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.DefectPrimaryMetric), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_DefectPrimaryMetric_TestMethodDic", "TestMethodDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.TestMethodDic), "DefectPrimaryMetric", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.DefectPrimaryMetric), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_EnvironmentFactor_EnvironmentFactorTypeDic", "EnvironmentFactorDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.EnvironmentFactorDic), "EnvironmentFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.EnvironmentFactor), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_EnvironmentFactor_UseCase", "UseCase", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.UseCase), "EnvironmentFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.EnvironmentFactor), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_EnvironmentFactor_WeightCoefficientDic", "WeightCoefficientDic", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MTP1.Models.WeightCoefficientDic), "EnvironmentFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.EnvironmentFactor), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_PrimaryMetricDic", "PrimaryMetricDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.PrimaryMetricDic), "UseCasePrimaryMetric", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.UseCasePrimaryMetric), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_UseCase_PriorityDic", "PriorityDic", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MTP1.Models.PriorityDic), "UseCase", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.UseCase), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_ReliabilityEvaluation_Project", "Project", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.Project), "ReliabilityEvaluation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.ReliabilityEvaluation), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_TestProgram_Project", "Project", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.Project), "TestProgram", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.TestProgram), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_UseCase_Project", "Project", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MTP1.Models.Project), "UseCase", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.UseCase), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_Project", "Project", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MTP1.Models.Project), "UseCasePrimaryMetric", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.UseCasePrimaryMetric), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_ReliabilityEvaluation_ReliabilityEvaluationDic", "ReliabilityEvaluationDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.ReliabilityEvaluationDic), "ReliabilityEvaluation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.ReliabilityEvaluation), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_ReliabilityEvaluation_TestProgram", "TestProgram", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MTP1.Models.TestProgram), "ReliabilityEvaluation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.ReliabilityEvaluation), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_UseCaseSecondaryMetric_MetricDic", "SecondaryMetricDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.SecondaryMetricDic), "UseCaseSecondaryMetric", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.UseCaseSecondaryMetric), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_TechnicalFactor_TechnicalFactorDic", "TechnicalFactorDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.TechnicalFactorDic), "TechnicalFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.TechnicalFactor), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_TechnicalFactor_UseCase", "UseCase", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.UseCase), "TechnicalFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.TechnicalFactor), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_TechnicalFactor_WeightCoefficientDic", "WeightCoefficientDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.WeightCoefficientDic), "TechnicalFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.TechnicalFactor), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_TechnicalFactor_WeightCoefficientDic1", "WeightCoefficientDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.WeightCoefficientDic), "TechnicalFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.TechnicalFactor), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_TestProgram_TestMethodDic", "TestMethodDic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.TestMethodDic), "TestProgram", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.TestProgram), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_UseCase_TestProgram", "TestProgram", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MTP1.Models.TestProgram), "UseCase", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.UseCase), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_TestProgram", "TestProgram", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MTP1.Models.TestProgram), "UseCasePrimaryMetric", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.UseCasePrimaryMetric), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_UseCase", "UseCase", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MTP1.Models.UseCase), "UseCasePrimaryMetric", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.UseCasePrimaryMetric), true)]
[assembly: EdmRelationshipAttribute("MtpDbModel", "FK_UseCaseSecondaryMetric_UseCase", "UseCase", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MTP1.Models.UseCase), "UseCaseSecondaryMetric", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MTP1.Models.UseCaseSecondaryMetric), true)]

#endregion

namespace MTP1.Models
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class MtpDbEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект MtpDbEntities, используя строку соединения из раздела "MtpDbEntities" файла конфигурации приложения.
        /// </summary>
        public MtpDbEntities() : base("name=MtpDbEntities", "MtpDbEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта MtpDbEntities.
        /// </summary>
        public MtpDbEntities(string connectionString) : base(connectionString, "MtpDbEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта MtpDbEntities.
        /// </summary>
        public MtpDbEntities(EntityConnection connection) : base(connection, "MtpDbEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Actor> Actor
        {
            get
            {
                if ((_Actor == null))
                {
                    _Actor = base.CreateObjectSet<Actor>("Actor");
                }
                return _Actor;
            }
        }
        private ObjectSet<Actor> _Actor;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ActorDic> ActorDic
        {
            get
            {
                if ((_ActorDic == null))
                {
                    _ActorDic = base.CreateObjectSet<ActorDic>("ActorDic");
                }
                return _ActorDic;
            }
        }
        private ObjectSet<ActorDic> _ActorDic;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Defect> Defect
        {
            get
            {
                if ((_Defect == null))
                {
                    _Defect = base.CreateObjectSet<Defect>("Defect");
                }
                return _Defect;
            }
        }
        private ObjectSet<Defect> _Defect;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<DefectDic> DefectDic
        {
            get
            {
                if ((_DefectDic == null))
                {
                    _DefectDic = base.CreateObjectSet<DefectDic>("DefectDic");
                }
                return _DefectDic;
            }
        }
        private ObjectSet<DefectDic> _DefectDic;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<DefectPrimaryMetric> DefectPrimaryMetric
        {
            get
            {
                if ((_DefectPrimaryMetric == null))
                {
                    _DefectPrimaryMetric = base.CreateObjectSet<DefectPrimaryMetric>("DefectPrimaryMetric");
                }
                return _DefectPrimaryMetric;
            }
        }
        private ObjectSet<DefectPrimaryMetric> _DefectPrimaryMetric;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Dictionaries> Dictionaries
        {
            get
            {
                if ((_Dictionaries == null))
                {
                    _Dictionaries = base.CreateObjectSet<Dictionaries>("Dictionaries");
                }
                return _Dictionaries;
            }
        }
        private ObjectSet<Dictionaries> _Dictionaries;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<EnvironmentFactor> EnvironmentFactor
        {
            get
            {
                if ((_EnvironmentFactor == null))
                {
                    _EnvironmentFactor = base.CreateObjectSet<EnvironmentFactor>("EnvironmentFactor");
                }
                return _EnvironmentFactor;
            }
        }
        private ObjectSet<EnvironmentFactor> _EnvironmentFactor;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<EnvironmentFactorDic> EnvironmentFactorDic
        {
            get
            {
                if ((_EnvironmentFactorDic == null))
                {
                    _EnvironmentFactorDic = base.CreateObjectSet<EnvironmentFactorDic>("EnvironmentFactorDic");
                }
                return _EnvironmentFactorDic;
            }
        }
        private ObjectSet<EnvironmentFactorDic> _EnvironmentFactorDic;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PrimaryMetricDic> PrimaryMetricDic
        {
            get
            {
                if ((_PrimaryMetricDic == null))
                {
                    _PrimaryMetricDic = base.CreateObjectSet<PrimaryMetricDic>("PrimaryMetricDic");
                }
                return _PrimaryMetricDic;
            }
        }
        private ObjectSet<PrimaryMetricDic> _PrimaryMetricDic;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PriorityDic> PriorityDic
        {
            get
            {
                if ((_PriorityDic == null))
                {
                    _PriorityDic = base.CreateObjectSet<PriorityDic>("PriorityDic");
                }
                return _PriorityDic;
            }
        }
        private ObjectSet<PriorityDic> _PriorityDic;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Project> Project
        {
            get
            {
                if ((_Project == null))
                {
                    _Project = base.CreateObjectSet<Project>("Project");
                }
                return _Project;
            }
        }
        private ObjectSet<Project> _Project;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ReliabilityEvaluation> ReliabilityEvaluation
        {
            get
            {
                if ((_ReliabilityEvaluation == null))
                {
                    _ReliabilityEvaluation = base.CreateObjectSet<ReliabilityEvaluation>("ReliabilityEvaluation");
                }
                return _ReliabilityEvaluation;
            }
        }
        private ObjectSet<ReliabilityEvaluation> _ReliabilityEvaluation;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ReliabilityEvaluationDic> ReliabilityEvaluationDic
        {
            get
            {
                if ((_ReliabilityEvaluationDic == null))
                {
                    _ReliabilityEvaluationDic = base.CreateObjectSet<ReliabilityEvaluationDic>("ReliabilityEvaluationDic");
                }
                return _ReliabilityEvaluationDic;
            }
        }
        private ObjectSet<ReliabilityEvaluationDic> _ReliabilityEvaluationDic;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SecondaryMetricDic> SecondaryMetricDic
        {
            get
            {
                if ((_SecondaryMetricDic == null))
                {
                    _SecondaryMetricDic = base.CreateObjectSet<SecondaryMetricDic>("SecondaryMetricDic");
                }
                return _SecondaryMetricDic;
            }
        }
        private ObjectSet<SecondaryMetricDic> _SecondaryMetricDic;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TechnicalFactor> TechnicalFactor
        {
            get
            {
                if ((_TechnicalFactor == null))
                {
                    _TechnicalFactor = base.CreateObjectSet<TechnicalFactor>("TechnicalFactor");
                }
                return _TechnicalFactor;
            }
        }
        private ObjectSet<TechnicalFactor> _TechnicalFactor;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TechnicalFactorDic> TechnicalFactorDic
        {
            get
            {
                if ((_TechnicalFactorDic == null))
                {
                    _TechnicalFactorDic = base.CreateObjectSet<TechnicalFactorDic>("TechnicalFactorDic");
                }
                return _TechnicalFactorDic;
            }
        }
        private ObjectSet<TechnicalFactorDic> _TechnicalFactorDic;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TestMethodDic> TestMethodDic
        {
            get
            {
                if ((_TestMethodDic == null))
                {
                    _TestMethodDic = base.CreateObjectSet<TestMethodDic>("TestMethodDic");
                }
                return _TestMethodDic;
            }
        }
        private ObjectSet<TestMethodDic> _TestMethodDic;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TestProgram> TestProgram
        {
            get
            {
                if ((_TestProgram == null))
                {
                    _TestProgram = base.CreateObjectSet<TestProgram>("TestProgram");
                }
                return _TestProgram;
            }
        }
        private ObjectSet<TestProgram> _TestProgram;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<UseCase> UseCase
        {
            get
            {
                if ((_UseCase == null))
                {
                    _UseCase = base.CreateObjectSet<UseCase>("UseCase");
                }
                return _UseCase;
            }
        }
        private ObjectSet<UseCase> _UseCase;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<UseCasePrimaryMetric> UseCasePrimaryMetric
        {
            get
            {
                if ((_UseCasePrimaryMetric == null))
                {
                    _UseCasePrimaryMetric = base.CreateObjectSet<UseCasePrimaryMetric>("UseCasePrimaryMetric");
                }
                return _UseCasePrimaryMetric;
            }
        }
        private ObjectSet<UseCasePrimaryMetric> _UseCasePrimaryMetric;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<UseCaseSecondaryMetric> UseCaseSecondaryMetric
        {
            get
            {
                if ((_UseCaseSecondaryMetric == null))
                {
                    _UseCaseSecondaryMetric = base.CreateObjectSet<UseCaseSecondaryMetric>("UseCaseSecondaryMetric");
                }
                return _UseCaseSecondaryMetric;
            }
        }
        private ObjectSet<UseCaseSecondaryMetric> _UseCaseSecondaryMetric;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WeightCoefficientDic> WeightCoefficientDic
        {
            get
            {
                if ((_WeightCoefficientDic == null))
                {
                    _WeightCoefficientDic = base.CreateObjectSet<WeightCoefficientDic>("WeightCoefficientDic");
                }
                return _WeightCoefficientDic;
            }
        }
        private ObjectSet<WeightCoefficientDic> _WeightCoefficientDic;

        #endregion
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Actor. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToActor(Actor actor)
        {
            base.AddObject("Actor", actor);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ActorDic. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToActorDic(ActorDic actorDic)
        {
            base.AddObject("ActorDic", actorDic);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Defect. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDefect(Defect defect)
        {
            base.AddObject("Defect", defect);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet DefectDic. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDefectDic(DefectDic defectDic)
        {
            base.AddObject("DefectDic", defectDic);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet DefectPrimaryMetric. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDefectPrimaryMetric(DefectPrimaryMetric defectPrimaryMetric)
        {
            base.AddObject("DefectPrimaryMetric", defectPrimaryMetric);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Dictionaries. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDictionaries(Dictionaries dictionaries)
        {
            base.AddObject("Dictionaries", dictionaries);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet EnvironmentFactor. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToEnvironmentFactor(EnvironmentFactor environmentFactor)
        {
            base.AddObject("EnvironmentFactor", environmentFactor);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet EnvironmentFactorDic. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToEnvironmentFactorDic(EnvironmentFactorDic environmentFactorDic)
        {
            base.AddObject("EnvironmentFactorDic", environmentFactorDic);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PrimaryMetricDic. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPrimaryMetricDic(PrimaryMetricDic primaryMetricDic)
        {
            base.AddObject("PrimaryMetricDic", primaryMetricDic);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PriorityDic. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPriorityDic(PriorityDic priorityDic)
        {
            base.AddObject("PriorityDic", priorityDic);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Project. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToProject(Project project)
        {
            base.AddObject("Project", project);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ReliabilityEvaluation. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToReliabilityEvaluation(ReliabilityEvaluation reliabilityEvaluation)
        {
            base.AddObject("ReliabilityEvaluation", reliabilityEvaluation);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ReliabilityEvaluationDic. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToReliabilityEvaluationDic(ReliabilityEvaluationDic reliabilityEvaluationDic)
        {
            base.AddObject("ReliabilityEvaluationDic", reliabilityEvaluationDic);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SecondaryMetricDic. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSecondaryMetricDic(SecondaryMetricDic secondaryMetricDic)
        {
            base.AddObject("SecondaryMetricDic", secondaryMetricDic);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TechnicalFactor. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTechnicalFactor(TechnicalFactor technicalFactor)
        {
            base.AddObject("TechnicalFactor", technicalFactor);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TechnicalFactorDic. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTechnicalFactorDic(TechnicalFactorDic technicalFactorDic)
        {
            base.AddObject("TechnicalFactorDic", technicalFactorDic);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TestMethodDic. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTestMethodDic(TestMethodDic testMethodDic)
        {
            base.AddObject("TestMethodDic", testMethodDic);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TestProgram. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTestProgram(TestProgram testProgram)
        {
            base.AddObject("TestProgram", testProgram);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet UseCase. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUseCase(UseCase useCase)
        {
            base.AddObject("UseCase", useCase);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet UseCasePrimaryMetric. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUseCasePrimaryMetric(UseCasePrimaryMetric useCasePrimaryMetric)
        {
            base.AddObject("UseCasePrimaryMetric", useCasePrimaryMetric);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet UseCaseSecondaryMetric. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUseCaseSecondaryMetric(UseCaseSecondaryMetric useCaseSecondaryMetric)
        {
            base.AddObject("UseCaseSecondaryMetric", useCaseSecondaryMetric);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WeightCoefficientDic. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWeightCoefficientDic(WeightCoefficientDic weightCoefficientDic)
        {
            base.AddObject("WeightCoefficientDic", weightCoefficientDic);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="Actor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Actor : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Actor.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="actor1">Исходное значение свойства Actor1.</param>
        /// <param name="useCase">Исходное значение свойства UseCase.</param>
        public static Actor CreateActor(global::System.Int32 id, global::System.Int32 actor1, global::System.Int32 useCase)
        {
            Actor actor = new Actor();
            actor.ID = id;
            actor.Actor1 = actor1;
            actor.UseCase = useCase;
            return actor;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Actor1
        {
            get
            {
                return _Actor1;
            }
            set
            {
                OnActor1Changing(value);
                ReportPropertyChanging("Actor1");
                _Actor1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Actor1");
                OnActor1Changed();
            }
        }
        private global::System.Int32 _Actor1;
        partial void OnActor1Changing(global::System.Int32 value);
        partial void OnActor1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UseCase
        {
            get
            {
                return _UseCase;
            }
            set
            {
                OnUseCaseChanging(value);
                ReportPropertyChanging("UseCase");
                _UseCase = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UseCase");
                OnUseCaseChanged();
            }
        }
        private global::System.Int32 _UseCase;
        partial void OnUseCaseChanging(global::System.Int32 value);
        partial void OnUseCaseChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> WeightCoefficient
        {
            get
            {
                return _WeightCoefficient;
            }
            set
            {
                OnWeightCoefficientChanging(value);
                ReportPropertyChanging("WeightCoefficient");
                _WeightCoefficient = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WeightCoefficient");
                OnWeightCoefficientChanged();
            }
        }
        private Nullable<global::System.Int32> _WeightCoefficient;
        partial void OnWeightCoefficientChanging(Nullable<global::System.Int32> value);
        partial void OnWeightCoefficientChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Quantity
        {
            get
            {
                return _Quantity;
            }
            set
            {
                OnQuantityChanging(value);
                ReportPropertyChanging("Quantity");
                _Quantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Quantity");
                OnQuantityChanged();
            }
        }
        private Nullable<global::System.Int32> _Quantity;
        partial void OnQuantityChanging(Nullable<global::System.Int32> value);
        partial void OnQuantityChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Actor_ActorDic", "ActorDic")]
        public ActorDic ActorDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ActorDic>("MtpDbModel.FK_Actor_ActorDic", "ActorDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ActorDic>("MtpDbModel.FK_Actor_ActorDic", "ActorDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ActorDic> ActorDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ActorDic>("MtpDbModel.FK_Actor_ActorDic", "ActorDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ActorDic>("MtpDbModel.FK_Actor_ActorDic", "ActorDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Actor_UseCase", "UseCase")]
        public UseCase UseCase1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_Actor_UseCase", "UseCase").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_Actor_UseCase", "UseCase").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UseCase> UseCase1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_Actor_UseCase", "UseCase");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UseCase>("MtpDbModel.FK_Actor_UseCase", "UseCase", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Actor_WeightCoefficientDic", "WeightCoefficientDic")]
        public WeightCoefficientDic WeightCoefficientDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_Actor_WeightCoefficientDic", "WeightCoefficientDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_Actor_WeightCoefficientDic", "WeightCoefficientDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WeightCoefficientDic> WeightCoefficientDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_Actor_WeightCoefficientDic", "WeightCoefficientDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_Actor_WeightCoefficientDic", "WeightCoefficientDic", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="ActorDic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ActorDic : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ActorDic.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static ActorDic CreateActorDic(global::System.Int32 id, global::System.String title)
        {
            ActorDic actorDic = new ActorDic();
            actorDic.ID = id;
            actorDic.Title = title;
            return actorDic;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Actor_ActorDic", "Actor")]
        public EntityCollection<Actor> Actor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Actor>("MtpDbModel.FK_Actor_ActorDic", "Actor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Actor>("MtpDbModel.FK_Actor_ActorDic", "Actor", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="Defect")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Defect : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Defect.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="useCase">Исходное значение свойства UseCase.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        /// <param name="type">Исходное значение свойства Type.</param>
        /// <param name="priority">Исходное значение свойства Priority.</param>
        public static Defect CreateDefect(global::System.Int32 id, global::System.Int32 useCase, global::System.String title, global::System.Int32 type, global::System.Int32 priority)
        {
            Defect defect = new Defect();
            defect.ID = id;
            defect.UseCase = useCase;
            defect.Title = title;
            defect.Type = type;
            defect.Priority = priority;
            return defect;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UseCase
        {
            get
            {
                return _UseCase;
            }
            set
            {
                OnUseCaseChanging(value);
                ReportPropertyChanging("UseCase");
                _UseCase = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UseCase");
                OnUseCaseChanged();
            }
        }
        private global::System.Int32 _UseCase;
        partial void OnUseCaseChanging(global::System.Int32 value);
        partial void OnUseCaseChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Type
        {
            get
            {
                return _Type;
            }
            set
            {
                OnTypeChanging(value);
                ReportPropertyChanging("Type");
                _Type = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Type");
                OnTypeChanged();
            }
        }
        private global::System.Int32 _Type;
        partial void OnTypeChanging(global::System.Int32 value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Priority
        {
            get
            {
                return _Priority;
            }
            set
            {
                OnPriorityChanging(value);
                ReportPropertyChanging("Priority");
                _Priority = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Priority");
                OnPriorityChanged();
            }
        }
        private global::System.Int32 _Priority;
        partial void OnPriorityChanging(global::System.Int32 value);
        partial void OnPriorityChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Defect_Defect", "UseCase")]
        public UseCase UseCase1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_Defect_Defect", "UseCase").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_Defect_Defect", "UseCase").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UseCase> UseCase1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_Defect_Defect", "UseCase");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UseCase>("MtpDbModel.FK_Defect_Defect", "UseCase", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Defect_DefectDic", "DefectDic")]
        public DefectDic DefectDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DefectDic>("MtpDbModel.FK_Defect_DefectDic", "DefectDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DefectDic>("MtpDbModel.FK_Defect_DefectDic", "DefectDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DefectDic> DefectDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DefectDic>("MtpDbModel.FK_Defect_DefectDic", "DefectDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DefectDic>("MtpDbModel.FK_Defect_DefectDic", "DefectDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Defect_PriorityDic", "PriorityDic")]
        public PriorityDic PriorityDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PriorityDic>("MtpDbModel.FK_Defect_PriorityDic", "PriorityDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PriorityDic>("MtpDbModel.FK_Defect_PriorityDic", "PriorityDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PriorityDic> PriorityDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PriorityDic>("MtpDbModel.FK_Defect_PriorityDic", "PriorityDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PriorityDic>("MtpDbModel.FK_Defect_PriorityDic", "PriorityDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_DefectPrimaryMetric_Defect", "DefectPrimaryMetric")]
        public EntityCollection<DefectPrimaryMetric> DefectPrimaryMetric
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DefectPrimaryMetric>("MtpDbModel.FK_DefectPrimaryMetric_Defect", "DefectPrimaryMetric");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DefectPrimaryMetric>("MtpDbModel.FK_DefectPrimaryMetric_Defect", "DefectPrimaryMetric", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="DefectDic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DefectDic : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта DefectDic.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static DefectDic CreateDefectDic(global::System.Int32 id, global::System.String title)
        {
            DefectDic defectDic = new DefectDic();
            defectDic.ID = id;
            defectDic.Title = title;
            return defectDic;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Defect_DefectDic", "Defect")]
        public EntityCollection<Defect> Defect
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Defect>("MtpDbModel.FK_Defect_DefectDic", "Defect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Defect>("MtpDbModel.FK_Defect_DefectDic", "Defect", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="DefectPrimaryMetric")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DefectPrimaryMetric : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта DefectPrimaryMetric.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="type">Исходное значение свойства Type.</param>
        /// <param name="value">Исходное значение свойства Value.</param>
        /// <param name="testMethod">Исходное значение свойства TestMethod.</param>
        /// <param name="defect">Исходное значение свойства Defect.</param>
        public static DefectPrimaryMetric CreateDefectPrimaryMetric(global::System.Int32 id, global::System.Int32 type, global::System.Int32 value, global::System.Int32 testMethod, global::System.Int32 defect)
        {
            DefectPrimaryMetric defectPrimaryMetric = new DefectPrimaryMetric();
            defectPrimaryMetric.ID = id;
            defectPrimaryMetric.Type = type;
            defectPrimaryMetric.Value = value;
            defectPrimaryMetric.TestMethod = testMethod;
            defectPrimaryMetric.Defect = defect;
            return defectPrimaryMetric;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Type
        {
            get
            {
                return _Type;
            }
            set
            {
                OnTypeChanging(value);
                ReportPropertyChanging("Type");
                _Type = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Type");
                OnTypeChanged();
            }
        }
        private global::System.Int32 _Type;
        partial void OnTypeChanging(global::System.Int32 value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.Int32 _Value;
        partial void OnValueChanging(global::System.Int32 value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TestMethod
        {
            get
            {
                return _TestMethod;
            }
            set
            {
                OnTestMethodChanging(value);
                ReportPropertyChanging("TestMethod");
                _TestMethod = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TestMethod");
                OnTestMethodChanged();
            }
        }
        private global::System.Int32 _TestMethod;
        partial void OnTestMethodChanging(global::System.Int32 value);
        partial void OnTestMethodChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Defect
        {
            get
            {
                return _Defect;
            }
            set
            {
                OnDefectChanging(value);
                ReportPropertyChanging("Defect");
                _Defect = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Defect");
                OnDefectChanged();
            }
        }
        private global::System.Int32 _Defect;
        partial void OnDefectChanging(global::System.Int32 value);
        partial void OnDefectChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_DefectPrimaryMetric_Defect", "Defect")]
        public Defect Defect1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Defect>("MtpDbModel.FK_DefectPrimaryMetric_Defect", "Defect").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Defect>("MtpDbModel.FK_DefectPrimaryMetric_Defect", "Defect").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Defect> Defect1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Defect>("MtpDbModel.FK_DefectPrimaryMetric_Defect", "Defect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Defect>("MtpDbModel.FK_DefectPrimaryMetric_Defect", "Defect", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_DefectPrimaryMetric_MetricDic", "SecondaryMetricDic")]
        public SecondaryMetricDic SecondaryMetricDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecondaryMetricDic>("MtpDbModel.FK_DefectPrimaryMetric_MetricDic", "SecondaryMetricDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecondaryMetricDic>("MtpDbModel.FK_DefectPrimaryMetric_MetricDic", "SecondaryMetricDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecondaryMetricDic> SecondaryMetricDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecondaryMetricDic>("MtpDbModel.FK_DefectPrimaryMetric_MetricDic", "SecondaryMetricDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecondaryMetricDic>("MtpDbModel.FK_DefectPrimaryMetric_MetricDic", "SecondaryMetricDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_DefectPrimaryMetric_TestMethodDic", "TestMethodDic")]
        public TestMethodDic TestMethodDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestMethodDic>("MtpDbModel.FK_DefectPrimaryMetric_TestMethodDic", "TestMethodDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestMethodDic>("MtpDbModel.FK_DefectPrimaryMetric_TestMethodDic", "TestMethodDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TestMethodDic> TestMethodDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestMethodDic>("MtpDbModel.FK_DefectPrimaryMetric_TestMethodDic", "TestMethodDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TestMethodDic>("MtpDbModel.FK_DefectPrimaryMetric_TestMethodDic", "TestMethodDic", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="Dictionaries")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Dictionaries : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Dictionaries.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static Dictionaries CreateDictionaries(global::System.Int32 id, global::System.String title)
        {
            Dictionaries dictionaries = new Dictionaries();
            dictionaries.ID = id;
            dictionaries.Title = title;
            return dictionaries;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TitleEng
        {
            get
            {
                return _TitleEng;
            }
            set
            {
                OnTitleEngChanging(value);
                ReportPropertyChanging("TitleEng");
                _TitleEng = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TitleEng");
                OnTitleEngChanged();
            }
        }
        private global::System.String _TitleEng;
        partial void OnTitleEngChanging(global::System.String value);
        partial void OnTitleEngChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="EnvironmentFactor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EnvironmentFactor : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта EnvironmentFactor.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="useCase">Исходное значение свойства UseCase.</param>
        /// <param name="environmentFactor1">Исходное значение свойства EnvironmentFactor1.</param>
        public static EnvironmentFactor CreateEnvironmentFactor(global::System.Int32 id, global::System.Int32 useCase, global::System.Int32 environmentFactor1)
        {
            EnvironmentFactor environmentFactor = new EnvironmentFactor();
            environmentFactor.ID = id;
            environmentFactor.UseCase = useCase;
            environmentFactor.EnvironmentFactor1 = environmentFactor1;
            return environmentFactor;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UseCase
        {
            get
            {
                return _UseCase;
            }
            set
            {
                OnUseCaseChanging(value);
                ReportPropertyChanging("UseCase");
                _UseCase = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UseCase");
                OnUseCaseChanged();
            }
        }
        private global::System.Int32 _UseCase;
        partial void OnUseCaseChanging(global::System.Int32 value);
        partial void OnUseCaseChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EnvironmentFactor1
        {
            get
            {
                return _EnvironmentFactor1;
            }
            set
            {
                OnEnvironmentFactor1Changing(value);
                ReportPropertyChanging("EnvironmentFactor1");
                _EnvironmentFactor1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EnvironmentFactor1");
                OnEnvironmentFactor1Changed();
            }
        }
        private global::System.Int32 _EnvironmentFactor1;
        partial void OnEnvironmentFactor1Changing(global::System.Int32 value);
        partial void OnEnvironmentFactor1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> WeightCoefficient
        {
            get
            {
                return _WeightCoefficient;
            }
            set
            {
                OnWeightCoefficientChanging(value);
                ReportPropertyChanging("WeightCoefficient");
                _WeightCoefficient = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WeightCoefficient");
                OnWeightCoefficientChanged();
            }
        }
        private Nullable<global::System.Int32> _WeightCoefficient;
        partial void OnWeightCoefficientChanging(Nullable<global::System.Int32> value);
        partial void OnWeightCoefficientChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Difficulty
        {
            get
            {
                return _Difficulty;
            }
            set
            {
                OnDifficultyChanging(value);
                ReportPropertyChanging("Difficulty");
                _Difficulty = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Difficulty");
                OnDifficultyChanged();
            }
        }
        private Nullable<global::System.Int32> _Difficulty;
        partial void OnDifficultyChanging(Nullable<global::System.Int32> value);
        partial void OnDifficultyChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_EnvironmentFactor_EnvironmentFactorTypeDic", "EnvironmentFactorDic")]
        public EnvironmentFactorDic EnvironmentFactorDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EnvironmentFactorDic>("MtpDbModel.FK_EnvironmentFactor_EnvironmentFactorTypeDic", "EnvironmentFactorDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EnvironmentFactorDic>("MtpDbModel.FK_EnvironmentFactor_EnvironmentFactorTypeDic", "EnvironmentFactorDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<EnvironmentFactorDic> EnvironmentFactorDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EnvironmentFactorDic>("MtpDbModel.FK_EnvironmentFactor_EnvironmentFactorTypeDic", "EnvironmentFactorDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<EnvironmentFactorDic>("MtpDbModel.FK_EnvironmentFactor_EnvironmentFactorTypeDic", "EnvironmentFactorDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_EnvironmentFactor_UseCase", "UseCase")]
        public UseCase UseCase1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_EnvironmentFactor_UseCase", "UseCase").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_EnvironmentFactor_UseCase", "UseCase").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UseCase> UseCase1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_EnvironmentFactor_UseCase", "UseCase");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UseCase>("MtpDbModel.FK_EnvironmentFactor_UseCase", "UseCase", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_EnvironmentFactor_WeightCoefficientDic", "WeightCoefficientDic")]
        public WeightCoefficientDic WeightCoefficientDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_EnvironmentFactor_WeightCoefficientDic", "WeightCoefficientDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_EnvironmentFactor_WeightCoefficientDic", "WeightCoefficientDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WeightCoefficientDic> WeightCoefficientDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_EnvironmentFactor_WeightCoefficientDic", "WeightCoefficientDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_EnvironmentFactor_WeightCoefficientDic", "WeightCoefficientDic", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="EnvironmentFactorDic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EnvironmentFactorDic : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта EnvironmentFactorDic.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static EnvironmentFactorDic CreateEnvironmentFactorDic(global::System.Int32 id, global::System.String title)
        {
            EnvironmentFactorDic environmentFactorDic = new EnvironmentFactorDic();
            environmentFactorDic.ID = id;
            environmentFactorDic.Title = title;
            return environmentFactorDic;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_EnvironmentFactor_EnvironmentFactorTypeDic", "EnvironmentFactor")]
        public EntityCollection<EnvironmentFactor> EnvironmentFactor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<EnvironmentFactor>("MtpDbModel.FK_EnvironmentFactor_EnvironmentFactorTypeDic", "EnvironmentFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<EnvironmentFactor>("MtpDbModel.FK_EnvironmentFactor_EnvironmentFactorTypeDic", "EnvironmentFactor", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="PrimaryMetricDic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PrimaryMetricDic : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PrimaryMetricDic.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static PrimaryMetricDic CreatePrimaryMetricDic(global::System.Int32 id, global::System.String title)
        {
            PrimaryMetricDic primaryMetricDic = new PrimaryMetricDic();
            primaryMetricDic.ID = id;
            primaryMetricDic.Title = title;
            return primaryMetricDic;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_PrimaryMetricDic", "UseCasePrimaryMetric")]
        public EntityCollection<UseCasePrimaryMetric> UseCasePrimaryMetric
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UseCasePrimaryMetric>("MtpDbModel.FK_UseCasePrimaryMetric_PrimaryMetricDic", "UseCasePrimaryMetric");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UseCasePrimaryMetric>("MtpDbModel.FK_UseCasePrimaryMetric_PrimaryMetricDic", "UseCasePrimaryMetric", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="PriorityDic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PriorityDic : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PriorityDic.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static PriorityDic CreatePriorityDic(global::System.Int32 id, global::System.String title)
        {
            PriorityDic priorityDic = new PriorityDic();
            priorityDic.ID = id;
            priorityDic.Title = title;
            return priorityDic;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Defect_PriorityDic", "Defect")]
        public EntityCollection<Defect> Defect
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Defect>("MtpDbModel.FK_Defect_PriorityDic", "Defect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Defect>("MtpDbModel.FK_Defect_PriorityDic", "Defect", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCase_PriorityDic", "UseCase")]
        public EntityCollection<UseCase> UseCase
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UseCase>("MtpDbModel.FK_UseCase_PriorityDic", "UseCase");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UseCase>("MtpDbModel.FK_UseCase_PriorityDic", "UseCase", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="Project")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Project : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Project.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static Project CreateProject(global::System.Int32 id, global::System.String title)
        {
            Project project = new Project();
            project.ID = id;
            project.Title = title;
            return project;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Version
        {
            get
            {
                return _Version;
            }
            set
            {
                OnVersionChanging(value);
                ReportPropertyChanging("Version");
                _Version = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Version");
                OnVersionChanged();
            }
        }
        private global::System.String _Version;
        partial void OnVersionChanging(global::System.String value);
        partial void OnVersionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> BeginDatePlaning
        {
            get
            {
                return _BeginDatePlaning;
            }
            set
            {
                OnBeginDatePlaningChanging(value);
                ReportPropertyChanging("BeginDatePlaning");
                _BeginDatePlaning = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BeginDatePlaning");
                OnBeginDatePlaningChanged();
            }
        }
        private Nullable<global::System.DateTime> _BeginDatePlaning;
        partial void OnBeginDatePlaningChanging(Nullable<global::System.DateTime> value);
        partial void OnBeginDatePlaningChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> EndDatePlaning
        {
            get
            {
                return _EndDatePlaning;
            }
            set
            {
                OnEndDatePlaningChanging(value);
                ReportPropertyChanging("EndDatePlaning");
                _EndDatePlaning = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndDatePlaning");
                OnEndDatePlaningChanged();
            }
        }
        private Nullable<global::System.DateTime> _EndDatePlaning;
        partial void OnEndDatePlaningChanging(Nullable<global::System.DateTime> value);
        partial void OnEndDatePlaningChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> BeginDateActual
        {
            get
            {
                return _BeginDateActual;
            }
            set
            {
                OnBeginDateActualChanging(value);
                ReportPropertyChanging("BeginDateActual");
                _BeginDateActual = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BeginDateActual");
                OnBeginDateActualChanged();
            }
        }
        private Nullable<global::System.DateTime> _BeginDateActual;
        partial void OnBeginDateActualChanging(Nullable<global::System.DateTime> value);
        partial void OnBeginDateActualChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> EndDateActual
        {
            get
            {
                return _EndDateActual;
            }
            set
            {
                OnEndDateActualChanging(value);
                ReportPropertyChanging("EndDateActual");
                _EndDateActual = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndDateActual");
                OnEndDateActualChanged();
            }
        }
        private Nullable<global::System.DateTime> _EndDateActual;
        partial void OnEndDateActualChanging(Nullable<global::System.DateTime> value);
        partial void OnEndDateActualChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Ucp
        {
            get
            {
                return _Ucp;
            }
            set
            {
                OnUcpChanging(value);
                ReportPropertyChanging("Ucp");
                _Ucp = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Ucp");
                OnUcpChanged();
            }
        }
        private Nullable<global::System.Int32> _Ucp;
        partial void OnUcpChanging(Nullable<global::System.Int32> value);
        partial void OnUcpChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ManHour
        {
            get
            {
                return _ManHour;
            }
            set
            {
                OnManHourChanging(value);
                ReportPropertyChanging("ManHour");
                _ManHour = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ManHour");
                OnManHourChanged();
            }
        }
        private Nullable<global::System.Int32> _ManHour;
        partial void OnManHourChanging(Nullable<global::System.Int32> value);
        partial void OnManHourChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ReliabilityEvaluation
        {
            get
            {
                return _ReliabilityEvaluation;
            }
            set
            {
                OnReliabilityEvaluationChanging(value);
                ReportPropertyChanging("ReliabilityEvaluation");
                _ReliabilityEvaluation = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReliabilityEvaluation");
                OnReliabilityEvaluationChanged();
            }
        }
        private Nullable<global::System.Int32> _ReliabilityEvaluation;
        partial void OnReliabilityEvaluationChanging(Nullable<global::System.Int32> value);
        partial void OnReliabilityEvaluationChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TechnicalFactor
        {
            get
            {
                return _TechnicalFactor;
            }
            set
            {
                OnTechnicalFactorChanging(value);
                ReportPropertyChanging("TechnicalFactor");
                _TechnicalFactor = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TechnicalFactor");
                OnTechnicalFactorChanged();
            }
        }
        private Nullable<global::System.Int32> _TechnicalFactor;
        partial void OnTechnicalFactorChanging(Nullable<global::System.Int32> value);
        partial void OnTechnicalFactorChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_ReliabilityEvaluation_Project", "ReliabilityEvaluation")]
        public EntityCollection<ReliabilityEvaluation> ReliabilityEvaluation1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ReliabilityEvaluation>("MtpDbModel.FK_ReliabilityEvaluation_Project", "ReliabilityEvaluation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ReliabilityEvaluation>("MtpDbModel.FK_ReliabilityEvaluation_Project", "ReliabilityEvaluation", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TestProgram_Project", "TestProgram")]
        public EntityCollection<TestProgram> TestProgram
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TestProgram>("MtpDbModel.FK_TestProgram_Project", "TestProgram");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TestProgram>("MtpDbModel.FK_TestProgram_Project", "TestProgram", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCase_Project", "UseCase")]
        public EntityCollection<UseCase> UseCase
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UseCase>("MtpDbModel.FK_UseCase_Project", "UseCase");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UseCase>("MtpDbModel.FK_UseCase_Project", "UseCase", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_Project", "UseCasePrimaryMetric")]
        public EntityCollection<UseCasePrimaryMetric> UseCasePrimaryMetric
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UseCasePrimaryMetric>("MtpDbModel.FK_UseCasePrimaryMetric_Project", "UseCasePrimaryMetric");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UseCasePrimaryMetric>("MtpDbModel.FK_UseCasePrimaryMetric_Project", "UseCasePrimaryMetric", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="ReliabilityEvaluation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ReliabilityEvaluation : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ReliabilityEvaluation.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="reliabilityEvaluation1">Исходное значение свойства ReliabilityEvaluation1.</param>
        /// <param name="value">Исходное значение свойства Value.</param>
        /// <param name="project">Исходное значение свойства Project.</param>
        public static ReliabilityEvaluation CreateReliabilityEvaluation(global::System.Int32 id, global::System.Int32 reliabilityEvaluation1, global::System.Int32 value, global::System.Int32 project)
        {
            ReliabilityEvaluation reliabilityEvaluation = new ReliabilityEvaluation();
            reliabilityEvaluation.ID = id;
            reliabilityEvaluation.ReliabilityEvaluation1 = reliabilityEvaluation1;
            reliabilityEvaluation.Value = value;
            reliabilityEvaluation.Project = project;
            return reliabilityEvaluation;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ReliabilityEvaluation1
        {
            get
            {
                return _ReliabilityEvaluation1;
            }
            set
            {
                OnReliabilityEvaluation1Changing(value);
                ReportPropertyChanging("ReliabilityEvaluation1");
                _ReliabilityEvaluation1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReliabilityEvaluation1");
                OnReliabilityEvaluation1Changed();
            }
        }
        private global::System.Int32 _ReliabilityEvaluation1;
        partial void OnReliabilityEvaluation1Changing(global::System.Int32 value);
        partial void OnReliabilityEvaluation1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.Int32 _Value;
        partial void OnValueChanging(global::System.Int32 value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Project
        {
            get
            {
                return _Project;
            }
            set
            {
                OnProjectChanging(value);
                ReportPropertyChanging("Project");
                _Project = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Project");
                OnProjectChanged();
            }
        }
        private global::System.Int32 _Project;
        partial void OnProjectChanging(global::System.Int32 value);
        partial void OnProjectChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Program
        {
            get
            {
                return _Program;
            }
            set
            {
                OnProgramChanging(value);
                ReportPropertyChanging("Program");
                _Program = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Program");
                OnProgramChanged();
            }
        }
        private Nullable<global::System.Int32> _Program;
        partial void OnProgramChanging(Nullable<global::System.Int32> value);
        partial void OnProgramChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_ReliabilityEvaluation_Project", "Project")]
        public Project Project1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_ReliabilityEvaluation_Project", "Project").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_ReliabilityEvaluation_Project", "Project").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Project> Project1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_ReliabilityEvaluation_Project", "Project");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Project>("MtpDbModel.FK_ReliabilityEvaluation_Project", "Project", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_ReliabilityEvaluation_ReliabilityEvaluationDic", "ReliabilityEvaluationDic")]
        public ReliabilityEvaluationDic ReliabilityEvaluationDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ReliabilityEvaluationDic>("MtpDbModel.FK_ReliabilityEvaluation_ReliabilityEvaluationDic", "ReliabilityEvaluationDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ReliabilityEvaluationDic>("MtpDbModel.FK_ReliabilityEvaluation_ReliabilityEvaluationDic", "ReliabilityEvaluationDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ReliabilityEvaluationDic> ReliabilityEvaluationDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ReliabilityEvaluationDic>("MtpDbModel.FK_ReliabilityEvaluation_ReliabilityEvaluationDic", "ReliabilityEvaluationDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ReliabilityEvaluationDic>("MtpDbModel.FK_ReliabilityEvaluation_ReliabilityEvaluationDic", "ReliabilityEvaluationDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_ReliabilityEvaluation_TestProgram", "TestProgram")]
        public TestProgram TestProgram
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestProgram>("MtpDbModel.FK_ReliabilityEvaluation_TestProgram", "TestProgram").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestProgram>("MtpDbModel.FK_ReliabilityEvaluation_TestProgram", "TestProgram").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TestProgram> TestProgramReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestProgram>("MtpDbModel.FK_ReliabilityEvaluation_TestProgram", "TestProgram");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TestProgram>("MtpDbModel.FK_ReliabilityEvaluation_TestProgram", "TestProgram", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="ReliabilityEvaluationDic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ReliabilityEvaluationDic : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ReliabilityEvaluationDic.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static ReliabilityEvaluationDic CreateReliabilityEvaluationDic(global::System.Int32 id, global::System.String title)
        {
            ReliabilityEvaluationDic reliabilityEvaluationDic = new ReliabilityEvaluationDic();
            reliabilityEvaluationDic.ID = id;
            reliabilityEvaluationDic.Title = title;
            return reliabilityEvaluationDic;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_ReliabilityEvaluation_ReliabilityEvaluationDic", "ReliabilityEvaluation")]
        public EntityCollection<ReliabilityEvaluation> ReliabilityEvaluation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ReliabilityEvaluation>("MtpDbModel.FK_ReliabilityEvaluation_ReliabilityEvaluationDic", "ReliabilityEvaluation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ReliabilityEvaluation>("MtpDbModel.FK_ReliabilityEvaluation_ReliabilityEvaluationDic", "ReliabilityEvaluation", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="SecondaryMetricDic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SecondaryMetricDic : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SecondaryMetricDic.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static SecondaryMetricDic CreateSecondaryMetricDic(global::System.Int32 id, global::System.String title)
        {
            SecondaryMetricDic secondaryMetricDic = new SecondaryMetricDic();
            secondaryMetricDic.ID = id;
            secondaryMetricDic.Title = title;
            return secondaryMetricDic;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_DefectPrimaryMetric_MetricDic", "DefectPrimaryMetric")]
        public EntityCollection<DefectPrimaryMetric> DefectPrimaryMetric
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DefectPrimaryMetric>("MtpDbModel.FK_DefectPrimaryMetric_MetricDic", "DefectPrimaryMetric");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DefectPrimaryMetric>("MtpDbModel.FK_DefectPrimaryMetric_MetricDic", "DefectPrimaryMetric", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCaseSecondaryMetric_MetricDic", "UseCaseSecondaryMetric")]
        public EntityCollection<UseCaseSecondaryMetric> UseCaseSecondaryMetric
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UseCaseSecondaryMetric>("MtpDbModel.FK_UseCaseSecondaryMetric_MetricDic", "UseCaseSecondaryMetric");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UseCaseSecondaryMetric>("MtpDbModel.FK_UseCaseSecondaryMetric_MetricDic", "UseCaseSecondaryMetric", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="TechnicalFactor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TechnicalFactor : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TechnicalFactor.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="useCase">Исходное значение свойства UseCase.</param>
        /// <param name="technicalFactor1">Исходное значение свойства TechnicalFactor1.</param>
        /// <param name="weightCoefficient">Исходное значение свойства WeightCoefficient.</param>
        /// <param name="difficulty">Исходное значение свойства Difficulty.</param>
        public static TechnicalFactor CreateTechnicalFactor(global::System.Int32 id, global::System.Int32 useCase, global::System.Int32 technicalFactor1, global::System.Int32 weightCoefficient, global::System.Int32 difficulty)
        {
            TechnicalFactor technicalFactor = new TechnicalFactor();
            technicalFactor.ID = id;
            technicalFactor.UseCase = useCase;
            technicalFactor.TechnicalFactor1 = technicalFactor1;
            technicalFactor.WeightCoefficient = weightCoefficient;
            technicalFactor.Difficulty = difficulty;
            return technicalFactor;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UseCase
        {
            get
            {
                return _UseCase;
            }
            set
            {
                OnUseCaseChanging(value);
                ReportPropertyChanging("UseCase");
                _UseCase = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UseCase");
                OnUseCaseChanged();
            }
        }
        private global::System.Int32 _UseCase;
        partial void OnUseCaseChanging(global::System.Int32 value);
        partial void OnUseCaseChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TechnicalFactor1
        {
            get
            {
                return _TechnicalFactor1;
            }
            set
            {
                OnTechnicalFactor1Changing(value);
                ReportPropertyChanging("TechnicalFactor1");
                _TechnicalFactor1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TechnicalFactor1");
                OnTechnicalFactor1Changed();
            }
        }
        private global::System.Int32 _TechnicalFactor1;
        partial void OnTechnicalFactor1Changing(global::System.Int32 value);
        partial void OnTechnicalFactor1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WeightCoefficient
        {
            get
            {
                return _WeightCoefficient;
            }
            set
            {
                OnWeightCoefficientChanging(value);
                ReportPropertyChanging("WeightCoefficient");
                _WeightCoefficient = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WeightCoefficient");
                OnWeightCoefficientChanged();
            }
        }
        private global::System.Int32 _WeightCoefficient;
        partial void OnWeightCoefficientChanging(global::System.Int32 value);
        partial void OnWeightCoefficientChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Difficulty
        {
            get
            {
                return _Difficulty;
            }
            set
            {
                OnDifficultyChanging(value);
                ReportPropertyChanging("Difficulty");
                _Difficulty = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Difficulty");
                OnDifficultyChanged();
            }
        }
        private global::System.Int32 _Difficulty;
        partial void OnDifficultyChanging(global::System.Int32 value);
        partial void OnDifficultyChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TechnicalFactor_TechnicalFactorDic", "TechnicalFactorDic")]
        public TechnicalFactorDic TechnicalFactorDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TechnicalFactorDic>("MtpDbModel.FK_TechnicalFactor_TechnicalFactorDic", "TechnicalFactorDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TechnicalFactorDic>("MtpDbModel.FK_TechnicalFactor_TechnicalFactorDic", "TechnicalFactorDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TechnicalFactorDic> TechnicalFactorDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TechnicalFactorDic>("MtpDbModel.FK_TechnicalFactor_TechnicalFactorDic", "TechnicalFactorDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TechnicalFactorDic>("MtpDbModel.FK_TechnicalFactor_TechnicalFactorDic", "TechnicalFactorDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TechnicalFactor_UseCase", "UseCase")]
        public UseCase UseCase1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_TechnicalFactor_UseCase", "UseCase").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_TechnicalFactor_UseCase", "UseCase").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UseCase> UseCase1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_TechnicalFactor_UseCase", "UseCase");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UseCase>("MtpDbModel.FK_TechnicalFactor_UseCase", "UseCase", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TechnicalFactor_WeightCoefficientDic", "WeightCoefficientDic")]
        public WeightCoefficientDic WeightCoefficientDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic", "WeightCoefficientDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic", "WeightCoefficientDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WeightCoefficientDic> WeightCoefficientDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic", "WeightCoefficientDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic", "WeightCoefficientDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TechnicalFactor_WeightCoefficientDic1", "WeightCoefficientDic")]
        public WeightCoefficientDic WeightCoefficientDic1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic1", "WeightCoefficientDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic1", "WeightCoefficientDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WeightCoefficientDic> WeightCoefficientDic1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic1", "WeightCoefficientDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WeightCoefficientDic>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic1", "WeightCoefficientDic", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="TechnicalFactorDic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TechnicalFactorDic : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TechnicalFactorDic.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static TechnicalFactorDic CreateTechnicalFactorDic(global::System.Int32 id, global::System.String title)
        {
            TechnicalFactorDic technicalFactorDic = new TechnicalFactorDic();
            technicalFactorDic.ID = id;
            technicalFactorDic.Title = title;
            return technicalFactorDic;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TechnicalFactor_TechnicalFactorDic", "TechnicalFactor")]
        public EntityCollection<TechnicalFactor> TechnicalFactor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TechnicalFactor>("MtpDbModel.FK_TechnicalFactor_TechnicalFactorDic", "TechnicalFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TechnicalFactor>("MtpDbModel.FK_TechnicalFactor_TechnicalFactorDic", "TechnicalFactor", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="TestMethodDic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TestMethodDic : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TestMethodDic.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static TestMethodDic CreateTestMethodDic(global::System.Int32 id, global::System.String title)
        {
            TestMethodDic testMethodDic = new TestMethodDic();
            testMethodDic.ID = id;
            testMethodDic.Title = title;
            return testMethodDic;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_DefectPrimaryMetric_TestMethodDic", "DefectPrimaryMetric")]
        public EntityCollection<DefectPrimaryMetric> DefectPrimaryMetric
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DefectPrimaryMetric>("MtpDbModel.FK_DefectPrimaryMetric_TestMethodDic", "DefectPrimaryMetric");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DefectPrimaryMetric>("MtpDbModel.FK_DefectPrimaryMetric_TestMethodDic", "DefectPrimaryMetric", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TestProgram_TestMethodDic", "TestProgram")]
        public EntityCollection<TestProgram> TestProgram
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TestProgram>("MtpDbModel.FK_TestProgram_TestMethodDic", "TestProgram");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TestProgram>("MtpDbModel.FK_TestProgram_TestMethodDic", "TestProgram", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="TestProgram")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TestProgram : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TestProgram.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="project">Исходное значение свойства Project.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        /// <param name="testMethod">Исходное значение свойства TestMethod.</param>
        public static TestProgram CreateTestProgram(global::System.Int32 id, global::System.Int32 project, global::System.String title, global::System.Int32 testMethod)
        {
            TestProgram testProgram = new TestProgram();
            testProgram.ID = id;
            testProgram.Project = project;
            testProgram.Title = title;
            testProgram.TestMethod = testMethod;
            return testProgram;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Project
        {
            get
            {
                return _Project;
            }
            set
            {
                OnProjectChanging(value);
                ReportPropertyChanging("Project");
                _Project = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Project");
                OnProjectChanged();
            }
        }
        private global::System.Int32 _Project;
        partial void OnProjectChanging(global::System.Int32 value);
        partial void OnProjectChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TestMethod
        {
            get
            {
                return _TestMethod;
            }
            set
            {
                OnTestMethodChanging(value);
                ReportPropertyChanging("TestMethod");
                _TestMethod = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TestMethod");
                OnTestMethodChanged();
            }
        }
        private global::System.Int32 _TestMethod;
        partial void OnTestMethodChanging(global::System.Int32 value);
        partial void OnTestMethodChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TestProgram_Project", "Project")]
        public Project Project1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_TestProgram_Project", "Project").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_TestProgram_Project", "Project").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Project> Project1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_TestProgram_Project", "Project");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Project>("MtpDbModel.FK_TestProgram_Project", "Project", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_ReliabilityEvaluation_TestProgram", "ReliabilityEvaluation")]
        public EntityCollection<ReliabilityEvaluation> ReliabilityEvaluation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ReliabilityEvaluation>("MtpDbModel.FK_ReliabilityEvaluation_TestProgram", "ReliabilityEvaluation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ReliabilityEvaluation>("MtpDbModel.FK_ReliabilityEvaluation_TestProgram", "ReliabilityEvaluation", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TestProgram_TestMethodDic", "TestMethodDic")]
        public TestMethodDic TestMethodDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestMethodDic>("MtpDbModel.FK_TestProgram_TestMethodDic", "TestMethodDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestMethodDic>("MtpDbModel.FK_TestProgram_TestMethodDic", "TestMethodDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TestMethodDic> TestMethodDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestMethodDic>("MtpDbModel.FK_TestProgram_TestMethodDic", "TestMethodDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TestMethodDic>("MtpDbModel.FK_TestProgram_TestMethodDic", "TestMethodDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCase_TestProgram", "UseCase")]
        public EntityCollection<UseCase> UseCase
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UseCase>("MtpDbModel.FK_UseCase_TestProgram", "UseCase");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UseCase>("MtpDbModel.FK_UseCase_TestProgram", "UseCase", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_TestProgram", "UseCasePrimaryMetric")]
        public EntityCollection<UseCasePrimaryMetric> UseCasePrimaryMetric
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UseCasePrimaryMetric>("MtpDbModel.FK_UseCasePrimaryMetric_TestProgram", "UseCasePrimaryMetric");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UseCasePrimaryMetric>("MtpDbModel.FK_UseCasePrimaryMetric_TestProgram", "UseCasePrimaryMetric", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="UseCase")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UseCase : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта UseCase.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static UseCase CreateUseCase(global::System.Int32 id, global::System.String title)
        {
            UseCase useCase = new UseCase();
            useCase.ID = id;
            useCase.Title = title;
            return useCase;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Project
        {
            get
            {
                return _Project;
            }
            set
            {
                OnProjectChanging(value);
                ReportPropertyChanging("Project");
                _Project = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Project");
                OnProjectChanged();
            }
        }
        private Nullable<global::System.Int32> _Project;
        partial void OnProjectChanging(Nullable<global::System.Int32> value);
        partial void OnProjectChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TestProgram
        {
            get
            {
                return _TestProgram;
            }
            set
            {
                OnTestProgramChanging(value);
                ReportPropertyChanging("TestProgram");
                _TestProgram = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TestProgram");
                OnTestProgramChanged();
            }
        }
        private Nullable<global::System.Int32> _TestProgram;
        partial void OnTestProgramChanging(Nullable<global::System.Int32> value);
        partial void OnTestProgramChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Priority
        {
            get
            {
                return _Priority;
            }
            set
            {
                OnPriorityChanging(value);
                ReportPropertyChanging("Priority");
                _Priority = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Priority");
                OnPriorityChanged();
            }
        }
        private Nullable<global::System.Int32> _Priority;
        partial void OnPriorityChanging(Nullable<global::System.Int32> value);
        partial void OnPriorityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Actor
        {
            get
            {
                return _Actor;
            }
            set
            {
                OnActorChanging(value);
                ReportPropertyChanging("Actor");
                _Actor = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Actor");
                OnActorChanged();
            }
        }
        private Nullable<global::System.Int32> _Actor;
        partial void OnActorChanging(Nullable<global::System.Int32> value);
        partial void OnActorChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> EnvironmentFactor
        {
            get
            {
                return _EnvironmentFactor;
            }
            set
            {
                OnEnvironmentFactorChanging(value);
                ReportPropertyChanging("EnvironmentFactor");
                _EnvironmentFactor = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EnvironmentFactor");
                OnEnvironmentFactorChanged();
            }
        }
        private Nullable<global::System.Int32> _EnvironmentFactor;
        partial void OnEnvironmentFactorChanging(Nullable<global::System.Int32> value);
        partial void OnEnvironmentFactorChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TechnicalFactor
        {
            get
            {
                return _TechnicalFactor;
            }
            set
            {
                OnTechnicalFactorChanging(value);
                ReportPropertyChanging("TechnicalFactor");
                _TechnicalFactor = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TechnicalFactor");
                OnTechnicalFactorChanged();
            }
        }
        private Nullable<global::System.Int32> _TechnicalFactor;
        partial void OnTechnicalFactorChanging(Nullable<global::System.Int32> value);
        partial void OnTechnicalFactorChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Ucp
        {
            get
            {
                return _Ucp;
            }
            set
            {
                OnUcpChanging(value);
                ReportPropertyChanging("Ucp");
                _Ucp = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Ucp");
                OnUcpChanged();
            }
        }
        private Nullable<global::System.Int32> _Ucp;
        partial void OnUcpChanging(Nullable<global::System.Int32> value);
        partial void OnUcpChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ManHour
        {
            get
            {
                return _ManHour;
            }
            set
            {
                OnManHourChanging(value);
                ReportPropertyChanging("ManHour");
                _ManHour = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ManHour");
                OnManHourChanged();
            }
        }
        private Nullable<global::System.Int32> _ManHour;
        partial void OnManHourChanging(Nullable<global::System.Int32> value);
        partial void OnManHourChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Actor_UseCase", "Actor")]
        public EntityCollection<Actor> Actor1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Actor>("MtpDbModel.FK_Actor_UseCase", "Actor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Actor>("MtpDbModel.FK_Actor_UseCase", "Actor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Defect_Defect", "Defect")]
        public EntityCollection<Defect> Defect
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Defect>("MtpDbModel.FK_Defect_Defect", "Defect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Defect>("MtpDbModel.FK_Defect_Defect", "Defect", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_EnvironmentFactor_UseCase", "EnvironmentFactor")]
        public EntityCollection<EnvironmentFactor> EnvironmentFactor1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<EnvironmentFactor>("MtpDbModel.FK_EnvironmentFactor_UseCase", "EnvironmentFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<EnvironmentFactor>("MtpDbModel.FK_EnvironmentFactor_UseCase", "EnvironmentFactor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCase_PriorityDic", "PriorityDic")]
        public PriorityDic PriorityDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PriorityDic>("MtpDbModel.FK_UseCase_PriorityDic", "PriorityDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PriorityDic>("MtpDbModel.FK_UseCase_PriorityDic", "PriorityDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PriorityDic> PriorityDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PriorityDic>("MtpDbModel.FK_UseCase_PriorityDic", "PriorityDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PriorityDic>("MtpDbModel.FK_UseCase_PriorityDic", "PriorityDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCase_Project", "Project")]
        public Project Project1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_UseCase_Project", "Project").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_UseCase_Project", "Project").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Project> Project1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_UseCase_Project", "Project");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Project>("MtpDbModel.FK_UseCase_Project", "Project", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TechnicalFactor_UseCase", "TechnicalFactor")]
        public EntityCollection<TechnicalFactor> TechnicalFactor1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TechnicalFactor>("MtpDbModel.FK_TechnicalFactor_UseCase", "TechnicalFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TechnicalFactor>("MtpDbModel.FK_TechnicalFactor_UseCase", "TechnicalFactor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCase_TestProgram", "TestProgram")]
        public TestProgram TestProgram1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestProgram>("MtpDbModel.FK_UseCase_TestProgram", "TestProgram").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestProgram>("MtpDbModel.FK_UseCase_TestProgram", "TestProgram").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TestProgram> TestProgram1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestProgram>("MtpDbModel.FK_UseCase_TestProgram", "TestProgram");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TestProgram>("MtpDbModel.FK_UseCase_TestProgram", "TestProgram", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_UseCase", "UseCasePrimaryMetric")]
        public EntityCollection<UseCasePrimaryMetric> UseCasePrimaryMetric
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UseCasePrimaryMetric>("MtpDbModel.FK_UseCasePrimaryMetric_UseCase", "UseCasePrimaryMetric");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UseCasePrimaryMetric>("MtpDbModel.FK_UseCasePrimaryMetric_UseCase", "UseCasePrimaryMetric", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCaseSecondaryMetric_UseCase", "UseCaseSecondaryMetric")]
        public EntityCollection<UseCaseSecondaryMetric> UseCaseSecondaryMetric
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UseCaseSecondaryMetric>("MtpDbModel.FK_UseCaseSecondaryMetric_UseCase", "UseCaseSecondaryMetric");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UseCaseSecondaryMetric>("MtpDbModel.FK_UseCaseSecondaryMetric_UseCase", "UseCaseSecondaryMetric", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="UseCasePrimaryMetric")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UseCasePrimaryMetric : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта UseCasePrimaryMetric.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="type">Исходное значение свойства Type.</param>
        /// <param name="value">Исходное значение свойства Value.</param>
        public static UseCasePrimaryMetric CreateUseCasePrimaryMetric(global::System.Int32 id, global::System.Int32 type, global::System.Int32 value)
        {
            UseCasePrimaryMetric useCasePrimaryMetric = new UseCasePrimaryMetric();
            useCasePrimaryMetric.ID = id;
            useCasePrimaryMetric.Type = type;
            useCasePrimaryMetric.Value = value;
            return useCasePrimaryMetric;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Project
        {
            get
            {
                return _Project;
            }
            set
            {
                OnProjectChanging(value);
                ReportPropertyChanging("Project");
                _Project = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Project");
                OnProjectChanged();
            }
        }
        private Nullable<global::System.Int32> _Project;
        partial void OnProjectChanging(Nullable<global::System.Int32> value);
        partial void OnProjectChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Program
        {
            get
            {
                return _Program;
            }
            set
            {
                OnProgramChanging(value);
                ReportPropertyChanging("Program");
                _Program = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Program");
                OnProgramChanged();
            }
        }
        private Nullable<global::System.Int32> _Program;
        partial void OnProgramChanging(Nullable<global::System.Int32> value);
        partial void OnProgramChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> UseCase
        {
            get
            {
                return _UseCase;
            }
            set
            {
                OnUseCaseChanging(value);
                ReportPropertyChanging("UseCase");
                _UseCase = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UseCase");
                OnUseCaseChanged();
            }
        }
        private Nullable<global::System.Int32> _UseCase;
        partial void OnUseCaseChanging(Nullable<global::System.Int32> value);
        partial void OnUseCaseChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Type
        {
            get
            {
                return _Type;
            }
            set
            {
                OnTypeChanging(value);
                ReportPropertyChanging("Type");
                _Type = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Type");
                OnTypeChanged();
            }
        }
        private global::System.Int32 _Type;
        partial void OnTypeChanging(global::System.Int32 value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.Int32 _Value;
        partial void OnValueChanging(global::System.Int32 value);
        partial void OnValueChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_PrimaryMetricDic", "PrimaryMetricDic")]
        public PrimaryMetricDic PrimaryMetricDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PrimaryMetricDic>("MtpDbModel.FK_UseCasePrimaryMetric_PrimaryMetricDic", "PrimaryMetricDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PrimaryMetricDic>("MtpDbModel.FK_UseCasePrimaryMetric_PrimaryMetricDic", "PrimaryMetricDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PrimaryMetricDic> PrimaryMetricDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PrimaryMetricDic>("MtpDbModel.FK_UseCasePrimaryMetric_PrimaryMetricDic", "PrimaryMetricDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PrimaryMetricDic>("MtpDbModel.FK_UseCasePrimaryMetric_PrimaryMetricDic", "PrimaryMetricDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_Project", "Project")]
        public Project Project1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_UseCasePrimaryMetric_Project", "Project").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_UseCasePrimaryMetric_Project", "Project").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Project> Project1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("MtpDbModel.FK_UseCasePrimaryMetric_Project", "Project");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Project>("MtpDbModel.FK_UseCasePrimaryMetric_Project", "Project", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_TestProgram", "TestProgram")]
        public TestProgram TestProgram
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestProgram>("MtpDbModel.FK_UseCasePrimaryMetric_TestProgram", "TestProgram").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestProgram>("MtpDbModel.FK_UseCasePrimaryMetric_TestProgram", "TestProgram").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TestProgram> TestProgramReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestProgram>("MtpDbModel.FK_UseCasePrimaryMetric_TestProgram", "TestProgram");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TestProgram>("MtpDbModel.FK_UseCasePrimaryMetric_TestProgram", "TestProgram", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCasePrimaryMetric_UseCase", "UseCase")]
        public UseCase UseCase1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_UseCasePrimaryMetric_UseCase", "UseCase").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_UseCasePrimaryMetric_UseCase", "UseCase").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UseCase> UseCase1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_UseCasePrimaryMetric_UseCase", "UseCase");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UseCase>("MtpDbModel.FK_UseCasePrimaryMetric_UseCase", "UseCase", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="UseCaseSecondaryMetric")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UseCaseSecondaryMetric : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта UseCaseSecondaryMetric.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="type">Исходное значение свойства Type.</param>
        /// <param name="value">Исходное значение свойства Value.</param>
        /// <param name="useCase">Исходное значение свойства UseCase.</param>
        public static UseCaseSecondaryMetric CreateUseCaseSecondaryMetric(global::System.Int32 id, global::System.Int32 type, global::System.Int32 value, global::System.Int32 useCase)
        {
            UseCaseSecondaryMetric useCaseSecondaryMetric = new UseCaseSecondaryMetric();
            useCaseSecondaryMetric.ID = id;
            useCaseSecondaryMetric.Type = type;
            useCaseSecondaryMetric.Value = value;
            useCaseSecondaryMetric.UseCase = useCase;
            return useCaseSecondaryMetric;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Type
        {
            get
            {
                return _Type;
            }
            set
            {
                OnTypeChanging(value);
                ReportPropertyChanging("Type");
                _Type = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Type");
                OnTypeChanged();
            }
        }
        private global::System.Int32 _Type;
        partial void OnTypeChanging(global::System.Int32 value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.Int32 _Value;
        partial void OnValueChanging(global::System.Int32 value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UseCase
        {
            get
            {
                return _UseCase;
            }
            set
            {
                OnUseCaseChanging(value);
                ReportPropertyChanging("UseCase");
                _UseCase = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UseCase");
                OnUseCaseChanged();
            }
        }
        private global::System.Int32 _UseCase;
        partial void OnUseCaseChanging(global::System.Int32 value);
        partial void OnUseCaseChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCaseSecondaryMetric_MetricDic", "SecondaryMetricDic")]
        public SecondaryMetricDic SecondaryMetricDic
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecondaryMetricDic>("MtpDbModel.FK_UseCaseSecondaryMetric_MetricDic", "SecondaryMetricDic").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecondaryMetricDic>("MtpDbModel.FK_UseCaseSecondaryMetric_MetricDic", "SecondaryMetricDic").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecondaryMetricDic> SecondaryMetricDicReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecondaryMetricDic>("MtpDbModel.FK_UseCaseSecondaryMetric_MetricDic", "SecondaryMetricDic");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecondaryMetricDic>("MtpDbModel.FK_UseCaseSecondaryMetric_MetricDic", "SecondaryMetricDic", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_UseCaseSecondaryMetric_UseCase", "UseCase")]
        public UseCase UseCase1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_UseCaseSecondaryMetric_UseCase", "UseCase").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_UseCaseSecondaryMetric_UseCase", "UseCase").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UseCase> UseCase1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UseCase>("MtpDbModel.FK_UseCaseSecondaryMetric_UseCase", "UseCase");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UseCase>("MtpDbModel.FK_UseCaseSecondaryMetric_UseCase", "UseCase", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MtpDbModel", Name="WeightCoefficientDic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WeightCoefficientDic : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WeightCoefficientDic.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="value">Исходное значение свойства Value.</param>
        public static WeightCoefficientDic CreateWeightCoefficientDic(global::System.Int32 id, global::System.Int32 value)
        {
            WeightCoefficientDic weightCoefficientDic = new WeightCoefficientDic();
            weightCoefficientDic.ID = id;
            weightCoefficientDic.Value = value;
            return weightCoefficientDic;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.Int32 _Value;
        partial void OnValueChanging(global::System.Int32 value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_Actor_WeightCoefficientDic", "Actor")]
        public EntityCollection<Actor> Actor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Actor>("MtpDbModel.FK_Actor_WeightCoefficientDic", "Actor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Actor>("MtpDbModel.FK_Actor_WeightCoefficientDic", "Actor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_EnvironmentFactor_WeightCoefficientDic", "EnvironmentFactor")]
        public EntityCollection<EnvironmentFactor> EnvironmentFactor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<EnvironmentFactor>("MtpDbModel.FK_EnvironmentFactor_WeightCoefficientDic", "EnvironmentFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<EnvironmentFactor>("MtpDbModel.FK_EnvironmentFactor_WeightCoefficientDic", "EnvironmentFactor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TechnicalFactor_WeightCoefficientDic", "TechnicalFactor")]
        public EntityCollection<TechnicalFactor> TechnicalFactor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TechnicalFactor>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic", "TechnicalFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TechnicalFactor>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic", "TechnicalFactor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtpDbModel", "FK_TechnicalFactor_WeightCoefficientDic1", "TechnicalFactor")]
        public EntityCollection<TechnicalFactor> TechnicalFactor1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TechnicalFactor>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic1", "TechnicalFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TechnicalFactor>("MtpDbModel.FK_TechnicalFactor_WeightCoefficientDic1", "TechnicalFactor", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
